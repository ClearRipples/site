{
  "name": "grunt-at-csstidy",
  "description": "Sorting CSS flies,and make it tidy.",
  "version": "0.1.4",
  "homepage": "https://github.com/lightningtgc/grunt-at-csstidy",
  "author": "",
  "repository": {
    "type": "git",
    "url": "https://github.com/lightningtgc/grunt-at-csstidy.git"
  },
  "bugs": {
    "url": "https://github.com/lightningtgc/grunt-at-csstidy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/lightningtgc/grunt-at-csstidy/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "csscomb": "~3.0.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5"
  },
  "peerDependencies": {
    "grunt": "^0.4.5"
  },
  "keywords": [
    "tasks",
    "csstidy",
    "alloyteam",
    "code guide",
    "cssorder",
    "css tools"
  ],
  "readme": "# grunt-at-csstidy [![Build Status](https://travis-ci.org/lightningtgc/grunt-at-csstidy.svg?branch=master)](http://travis-ci.org/lightningtgc/grunt-at-csstidy) [![NPM version](https://badge.fury.io/js/grunt-at-csstidy.png)](http://badge.fury.io/js/grunt-at-csstidy)\n\n\n> Alloyteam 团队规范工具系列——自动整理CSS代码工具。\n\n> grunt-at-csstidy 是基于 Grunt '0.4.x' 与 csscomb '3.x' 的Grunt插件。\n\n> 整合了Alloyteam的团队规范，并解决了部分CSS语法树解析的兼容问题。\n\n## 上手教程\n\n如果你之前没用过 [Grunt](http://gruntjs.com/) ，可以参考官方教程 [Getting Started](http://gruntjs.com/getting-started) ，里面会介绍怎么创建 [Gruntfile](http://gruntjs.com/sample-gruntfile) 以及安装Grunt的插件.\n\n一旦你熟悉这些流程后，将会用到下面的命令：\n\n```shell\nnpm install grunt-at-csstidy --save-dev\n```\n\n安装完插件之后，你可以在Gruntfile.js中加上下面的任务来启用这个插件：\n\n```js\ngrunt.loadNpmTasks('grunt-at-csstidy');\n```\n\n当然，你如果是用自动加载任务的形式，则不需要添加上面的启用任务。\n\n## 插件详细配置相关\n\n#### 支持特性：\n\n* 支持单个文件，多个文件的自动化整理\n* 支持文件夹，模糊路径的动态匹配处理\n* 支持CSS,SASS,LESS的文件类型\n\n#### 动态配置，支持文件夹模糊匹配\n\n这是比较常用的配置形式，可以针对整个文件夹进行匹配处理。\n\n动态匹配例子：\n\n```js\ngrunt.initConfig({\n    csstidy: {\n        // dynamic_mappings可自定义，但grunt官方支持该名称的特性，建议保留\n        dynamic_mappings: {\n            expand: true, // 开启动态扩展，保留\n            cwd: '/styles/css/', // 源文件相对于这个路径进行查找\n            src: ['**/*.css', '!*.resorted.css'], // 目标文件，支持模糊与详细的写法，与过滤规则\n            dest: '/dest/css/', // 转换生成的目标路径，如果是替换源文件，则于cwd保持一致\n            ext: '.resorted.css' //生成文件的后缀别名，如果是替换源文件，则可去掉\n        }\n    }\n});\n```\n\n#### 匹配单文件，具体某几个文件\n\n例子如下：\n\n```js\ngrunt.initConfig({\n    csstidy: {\n        // 任务名（如single，可自定义）\n        single: {\n            files: {\n                // 格式:  ‘目标文件路径’:['源文件路径']\n                // 如需替换文件，则编写时两者路径相同即可\n                'dest/one-resorted.css': ['src/one.css'] // 匹配单个文件\n            }\n        },\n        multi: {\n            files: {\n                'dest/one-resorted.css': ['src/one.css'],// 匹配多个文件\n                'dest/two-resorted.css': ['src/two.css']\n            }\n        }\n    }\n});\n```\n\n#### 整理相关配置默认按照[Alloyteam的CSS团队规范](http://alloyteam.github.io/code-guide/#css)\n\n支持自定义配置文件进行CSS代码整理，详细配置可参照[该文档](https://github.com/csscomb/csscomb.js/blob/master/doc/configuration.md)，\n\n具体步骤：通过在 options 中添加config，并指定相应路径。\n\n自定义整理配置例子:\n\n```js\ngrunt.initConfig({\n    csstidy: {\n        custom: {\n            options: {\n                config: '/path/config.json'\n            },\n            files: {\n                'dest/one-resorted.css': ['src/one.css']\n            }\n        }\n    }\n});\n```\n\n## 修改历史\n\n+ v0.1.4：Fix CSS 解析语法树问题\n+ v0.1.0: 初始化\n",
  "readmeFilename": "README.md",
  "_id": "grunt-at-csstidy@0.1.4",
  "_from": "grunt-at-csstidy@^0.1.4"
}
